"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[2941],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),y=r,m=p["".concat(i,".").concat(y)]||p[y]||u[y]||o;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(3117),r=(n(7294),n(3905));const o={id:"getting-started",title:"Getting Started",sidebar_position:1},s=void 0,l={unversionedId:"guides/getting-started",id:"guides/getting-started",title:"Getting Started",description:"Here you will find tutorials and tools that help you build on LUKSO. As LUKSO is an EVM-based Blockchain, all tools and tutorials for Ethereum also work well for LUKSO. If you need EVM and Smart Contract knowledge, we advise you to look at these great resources from the Ethereum Foundation.",source:"@site/docs/guides/getting-started.md",sourceDirName:"guides",slug:"/guides/getting-started",permalink:"/guides/getting-started",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/getting-started.md",tags:[],version:"current",lastUpdatedAt:1658443287,formattedLastUpdatedAt:"Jul 21, 2022",sidebarPosition:1,frontMatter:{id:"getting-started",title:"Getting Started",sidebar_position:1},sidebar:"guidesSidebar",next:{title:"Create a Universal Profile",permalink:"/guides/universal-profile/create-profile"}},i={},c=[{value:"UP in 1-2-3",id:"up-in-1-2-3",level:2},{value:"Generate a key that will control your Universal Profile.",id:"generate-a-key-that-will-control-your-universal-profile",level:4},{value:"Fund the Universal Profile by using the L14 Faucet.",id:"fund-the-universal-profile-by-using-the-l14-faucet",level:4},{value:"Deploy your UP smart contracts using <code>@lukso/lsp-factory.js</code>.",id:"deploy-your-up-smart-contracts-using-luksolsp-factoryjs",level:4},{value:"Read the UP smart contract ERC725Y keys and values with <code>@erc725/erc725.js</code>.",id:"read-the-up-smart-contract-erc725y-keys-and-values-with-erc725erc725js",level:4},{value:"Interact directly with any smart contract through your UP, by loading the ABIs from <code>@lukso/lsp-smart-contracts</code>.",id:"interact-directly-with-any-smart-contract-through-your-up-by-loading-the-abis-from-luksolsp-smart-contracts",level:4}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Here you will find tutorials and tools that help you build on LUKSO. As LUKSO is an EVM-based Blockchain, all tools and tutorials for Ethereum also work well for LUKSO. If you need EVM and Smart Contract knowledge, we advise you to look at ",(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/learning-tools/"},"these great resources from the Ethereum Foundation"),"."),(0,r.kt)("p",null,"Other than most EVM chains, you're encouraged on LUKSO to mainly use ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/introduction"},"Universal Profiles")," as the account solution for dApps and as a gateway for your users to the LUKSO Blockchain. It is discouraged to use simple EOAs as accounts, as they are insecure, inflexible and don't track incoming assets. If you need a more general understanding of why we build our accounts on the smart contract level, we advise you to read about the ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/lukso/lukso-ecosystem-part-1-4c3f5d67b081"},"LUKSO Ecosystem")," concept."),(0,r.kt)("h2",{id:"up-in-1-2-3"},"UP in 1-2-3"),(0,r.kt)("p",null,"This little tutorial will show you how to deploy and interact with a UniversalProfile.\nTo maximize your learning, you can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"run this tutorial in the console of the ",(0,r.kt)("a",{parentName:"li",href:"https://universalprofile.cloud"},"profile explorer"),","),(0,r.kt)("li",{parentName:"ul"},"clone the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Hugoo/up-sample-react-app"},(0,r.kt)("inlineCode",{parentName:"a"},"up-sample-react-app"))," repo and work in it,"),(0,r.kt)("li",{parentName:"ul"},"write your own JavaScript or TypeScript code snippets on top, and"),(0,r.kt)("li",{parentName:"ul"},"check the ",(0,r.kt)("a",{parentName:"li",href:"https://hugoo.github.io/up-sample-react-app/"},"demo app")," for some first impressions.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"https://universalprofile.cloud"},"profile explorer")," has all necessary entities under the ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts")," object. Take a look at different profiles and assets you want to experiment with within your code.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We will use the ",(0,r.kt)("a",{parentName:"p",href:"../tools/erc725js/getting-started"},(0,r.kt)("inlineCode",{parentName:"a"},"@erc725/erc725.js"))," NPM package in order to get quick accsess to reading keys, values and ABIs.")),(0,r.kt)("h4",{id:"generate-a-key-that-will-control-your-universal-profile"},"Generate a key that will control your Universal Profile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Load web3"',title:'"Load','web3"':!0},"import Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst myDummyPassword = 'mypassword';\n\n// Here we try to load an already created key from the localstorage\nweb3.eth.accounts.wallet.load(myDummyPassword);\n\n// If none exists we create a new key\nif (!web3.eth.accounts.wallet.length) {\n  web3.eth.accounts.wallet.create(1);\n  web3.eth.accounts.wallet.save(myDummyPassword);\n\n  // Then we log the address and send test LYX from the L14 faucet here: http://faucet.l14.lukso.network\n  console.log('My new key address ', web3.eth.accounts.wallet[0].address);\n\n  // If we already have a key created we display it, with its current balance\n} else {\n  const myKeyAddress = web3.eth.accounts.wallet[0].address;\n\n  console.log('Loaded existing key address ', myKeyAddress);\n  console.log(\n    'Balance ',\n    web3.utils.fromWei(await web3.eth.getBalance(myKeyAddress), 'ether'),\n    'LYXt',\n  );\n}\n\n// Stop here if our key is yet created and funded\nif (!myKeyAddress) return;\n")),(0,r.kt)("h4",{id:"fund-the-universal-profile-by-using-the-l14-faucet"},"Fund the Universal Profile by using the ",(0,r.kt)("a",{parentName:"h4",href:"http://faucet.l14.lukso.network"},"L14 Faucet"),"."),(0,r.kt)("h4",{id:"deploy-your-up-smart-contracts-using-luksolsp-factoryjs"},"Deploy your UP smart contracts using ",(0,r.kt)("a",{parentName:"h4",href:"../tools/lsp-factoryjs/getting-started"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-factory.js")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Deploy and configure contracts with lsp-factory.js"',title:'"Deploy',and:!0,configure:!0,contracts:!0,with:!0,'lsp-factory.js"':!0},"import { LSPFactory } from '@lukso/lsp-factory.js';\n\n// We initialize the LSPFactory with the right chain RPC endpoint and a privatekey from which we will deploy the UPs\nconst lspFactory = new LSPFactory('https://rpc.l14.lukso.network', {\n  chainId: 22, // L14s chain Id\n  deployKey: web3.eth.accounts.wallet[0].privateKey,\n});\n\nconst deployedContracts = await lspFactory.LSP3UniversalProfile.deploy({\n  controllerAddresses: [myKeyAddress], // our key will be controlling our UP in the beginning\n  lsp3Profile: {\n    name: 'My Universal Profile',\n    description: 'My Cool Universal Profile',\n    profileImage: [fileBlob], // got some Image uploaded?\n    backgroundImage: [],\n    tags: ['Public Profile'],\n    links: [\n      {\n        title: 'My Website',\n        url: 'http://my-website.com',\n      },\n    ],\n  },\n});\n\n// Get the UP address\nconst myUPAddress = deployedContracts.ERC725Account.address;\n// 0xB46BBD556589565730C06bB4B7454B1596c9E70A\n")),(0,r.kt)("h4",{id:"read-the-up-smart-contract-erc725y-keys-and-values-with-erc725erc725js"},"Read the UP smart contract ERC725Y keys and values with ",(0,r.kt)("a",{parentName:"h4",href:"../tools/erc725js/getting-started"},(0,r.kt)("inlineCode",{parentName:"a"},"@erc725/erc725.js")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Read Universal Profile ERC725 keys/values with erc725.js"',title:'"Read',Universal:!0,Profile:!0,ERC725:!0,"keys/values":!0,with:!0,'erc725.js"':!0},"import { ERC725 } from '@erc725/erc725.js';\n\n// Part of LSP3-UniversalProfile Schema\n// https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-3-UniversalProfile.md\nconst schema = [\n  {\n    name: 'SupportedStandards:LSP3UniversalProfile',\n    key: '0xeafec4d89fa9619884b6b89135626455000000000000000000000000abe425d6',\n    keyType: 'Mapping',\n    valueContent: '0xabe425d6',\n    valueType: 'bytes',\n  },\n  {\n    name: 'LSP3Profile',\n    key: '0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5',\n    keyType: 'Singleton',\n    valueContent: 'JSONURL',\n    valueType: 'bytes',\n  },\n  {\n    name: 'LSP1UniversalReceiverDelegate',\n    key: '0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47',\n    keyType: 'Singleton',\n    valueContent: 'Address',\n    valueType: 'address',\n  },\n];\n\nconst provider = new Web3.providers.HttpProvider(\n  'https://rpc.l14.lukso.network',\n);\n\nconst erc725 = new ERC725(schema, myUPAddress, provider);\nconst config = {\n  ipfsGateway: 'https://ipfs.lukso.network/ipfs/',\n};\n\nconst data = await erc725.fetchData();\n\nconsole.log(data);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="console.log(data)"',title:'"console.log(data)"'},'{\n  "SupportedStandards:LSP3UniversalProfile": "0xabe425d6",\n  "LSP3Profile": {\n    "LSP3Profile": {\n      "name": "My Universal Profile",\n      "description": "My Cool Universal Profile",\n      "backgroundImage": [],\n      "tags": ["Public Profile"],\n      "links": [\n        {\n          "title": "My Website",\n          "url": "http://my-website.com"\n        }\n      ]\n    }\n  },\n  "LSP1UniversalReceiverDelegate": "0x9A668677384CD4F5c49Cb057f0cEB2b783Ed670F"\n}\n')),(0,r.kt)("h4",{id:"interact-directly-with-any-smart-contract-through-your-up-by-loading-the-abis-from-luksolsp-smart-contracts"},"Interact directly with any smart contract through your UP, by loading the ABIs from ",(0,r.kt)("a",{parentName:"h4",href:"https://www.npmjs.com/package/@lukso/lsp-smart-contracts"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Interact directly through your UP"',title:'"Interact',directly:!0,through:!0,your:!0,'UP"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\n\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, erc725Address);\n\nconst keyManagerAddress = await myUP.methods.owner().call();\n\nconsole.log(keyManagerAddress);\n// e.g. 0x72662E4da74278430123cE51405c1e7A1B87C294\n\nconst myKeyManager = new web3.eth.Contract(KeyManager.abi, keyManagerAddress);\n\n// Set data on your own UP, though the key manager\nconst abi = myUP.methods\n  .setData(\n    ['0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5'], // LSP3Profile\n    [\n      '0x6f357c6ad6c04598b25d41b96fb88a8c8ec4f4c3de2dc9bdaab7e71f40ed012b84d0c126697066733a2f2f516d6262447348577a4d4d724538594345766e3342633254706756793176535736414d3946376168595642573874',\n    ], // encoded JSONURL: https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md#jsonurl\n  )\n  .encodeABI();\n\n// send your tx to the blockchain, from the controlling key address, through the key manager\nawait myKeyManager.methods.execute(abi).send({\n  from: web3.eth.accounts.wallet[0].address,\n  gas: 200_000,\n  gasPrice: web3.utils.toWei('20', 'gwei'),\n});\n\n// OR interact with another contract\nlet myOtherSC = new web3.eth.Contract(MyOtherSC.abi, myOtherSCAddress);\n\n// get the ABI of the call on the other contract\nlet abi = myOtherSC.methods.myCoolfunction('dummyParameter').encodeABI();\n\n// call the execute function on your UP (operation = 0 = CALL, to, value, calldata)\nabi = myUP.methods.execute(0, myOtherSCAddress, 0, abi).encodeABI();\n\n// send your tx to the blockchain, from the controlling key address, through the key manager\nmyKeyManager.methods.execute(abi).send({\n  from: web3.eth.accounts.wallet[0].address,\n  gas: 200_000,\n  gasPrice: web3.utils.toWei(20, 'gwei'),\n});\n")))}u.isMDXComponent=!0}}]);