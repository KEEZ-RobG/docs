"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7823],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(f,l(l({ref:t},u),{},{components:a})):n.createElement(f,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(4334);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(3117),r=a(7294),o=a(4334),l=a(2389),s=a(7392),i=a(7094),c=a(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var t,a;const{lazy:l,block:p,defaultValue:m,values:f,groupId:h,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,s.l)(v,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===m?m:null!=(t=null!=m?m:null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)?t:g[0].props.value;if(null!==w&&!v.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:b,setTabGroupChoices:N}=(0,i.U)(),[P,x]=(0,r.useState)(w),L=[],{blockElementScrollPositionUntilNextRender:U}=(0,c.o5)();if(null!=h){const e=b[h];null!=e&&e!==P&&v.some((t=>t.value===e))&&x(e)}const C=e=>{const t=e.currentTarget,a=L.indexOf(t),n=v[a].value;n!==P&&(U(t),x(n),null!=h&&N(h,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=L.indexOf(e.currentTarget)+1;a=null!=(n=L[t])?n:L[0];break}case"ArrowLeft":{var r;const t=L.indexOf(e.currentTarget)-1;a=null!=(r=L[t])?r:L[L.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},k)},v.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:e=>L.push(e),onKeyDown:E,onFocus:C,onClick:C},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":P===t})}),null!=a?a:t)}))),l?(0,r.cloneElement)(g.filter((e=>e.props.value===P))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==P})))))}function m(e){const t=(0,l.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},7488:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(3117),r=(a(7294),a(3905));a(5488),a(5162);const o={sidebar_label:"Transfer LYX",sidebar_position:3},l="Transfer LYX",s={unversionedId:"guides/universal-profile/transfer-lyx",id:"guides/universal-profile/transfer-lyx",title:"Transfer LYX",description:"In this guide, we will learn how to transfer LYX from our Universal Profile to any address (including another ). We will cover:",source:"@site/docs/guides/universal-profile/transfer-lyx.md",sourceDirName:"guides/universal-profile",slug:"/guides/universal-profile/transfer-lyx",permalink:"/guides/universal-profile/transfer-lyx",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-profile/transfer-lyx.md",tags:[],version:"current",lastUpdatedAt:1658929014,formattedLastUpdatedAt:"Jul 27, 2022",sidebarPosition:3,frontMatter:{sidebar_label:"Transfer LYX",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Edit a Universal Profile",permalink:"/guides/universal-profile/edit-profile"},next:{title:"Interact with Contracts",permalink:"/guides/universal-profile/interact-with-contracts"}},i={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Basics of the <code>execute(...)</code> function",id:"basics-of-the-execute-function",level:3},{value:"Interacting via the Key Manager",id:"interacting-via-the-key-manager",level:3},{value:"Setup",id:"setup",level:2},{value:"Step 1 - Get some LYX",id:"step-1---get-some-lyx",level:2},{value:"Step 2 - Create the contracts instances",id:"step-2---create-the-contracts-instances",level:2},{value:"Step 3 - Encode the payload to transfer LYX",id:"step-3---encode-the-payload-to-transfer-lyx",level:2},{value:"Step 4 - Execute via the Key Manager",id:"step-4---execute-via-the-key-manager",level:2},{value:"4.1 - Load our EOA",id:"41---load-our-eoa",level:3},{value:"4.2 - Send the LYX transfer payload",id:"42---send-the-lyx-transfer-payload",level:3},{value:"Final Code",id:"final-code",level:2}],u={toc:c};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transfer-lyx"},"Transfer LYX"),(0,r.kt)("p",null,"In this guide, we will learn ",(0,r.kt)("strong",{parentName:"p"},"how to transfer LYX")," from our Universal Profile to any ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," (including another \ud83c\udd99 ). We will cover:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the basics of the ",(0,r.kt)("inlineCode",{parentName:"li"},"execute(...)")," function and how it works."),(0,r.kt)("li",{parentName:"ul"},"how to use this function to transfer LYX from our UP.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guide - How to send LYX from a Universal Profile",src:a(6173).Z,width:"6901",height:"2318"})),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Let's recap what we have learned so far!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In our ",(0,r.kt)("a",{parentName:"p",href:"/guides/universal-profile/create-profile"},(0,r.kt)("strong",{parentName:"a"},"Create a Universal Profile"))," guide, we saw in the ",(0,r.kt)("a",{parentName:"p",href:"/guides/universal-profile/create-profile#contracts-overview"},"Universal Profile architecture diagram")," that the owner of a Universal Profile (UP) is a Key Manager (KM). This smart contract acts as its controller.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In our ",(0,r.kt)("a",{parentName:"p",href:"/guides/universal-profile/edit-profile"},(0,r.kt)("strong",{parentName:"a"},"Edit a Universal Profile"))," guide, we saw the basics of interacting with our UP to edit our profile info. We did so by interacting via the KM."))),(0,r.kt)("p",null,"We previously saw how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"setData(...)")," to update data in our UP contract's storage. Let's now look at ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(...)"),"."),(0,r.kt)("h3",{id:"basics-of-the-execute-function"},"Basics of the ",(0,r.kt)("inlineCode",{parentName:"h3"},"execute(...)")," function"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/erc725-contract#execute---erc725x"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(operation,to,value,data)"))," function from ",(0,r.kt)("a",{parentName:"p",href:"/standards/lsp-background/erc725#erc725x---generic-executor"},"ERC725X")," enable us to use our UP to interact with other addresses, such as transferring LYX or calling other smart contracts. This function takes four arguments (see ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/erc725-contract#execute---erc725x"},"ERC725 API docs"),")."),(0,r.kt)("p",null,"We can use this function to transfer LYX from our UP to any address (including another UP). Transferring LYX from our UP is as simple as making a standard ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permission-values"},(0,r.kt)("inlineCode",{parentName:"a"},"CALL"))," to any ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),", attaching some ",(0,r.kt)("strong",{parentName:"p"},"value")," to the call."),(0,r.kt)("p",null,"For a regular LYX transfer, the parameters will be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_operation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (for ",(0,r.kt)("inlineCode",{parentName:"li"},"CALL"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_to"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"address")," we want to send LYX to (Externally Owned Account or contract address)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_value"),": the amount of LYX we want to transfer (in Wei)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_data"),": empty (",(0,r.kt)("inlineCode",{parentName:"li"},"0x")," since we are just transferring LYX).")),(0,r.kt)("h3",{id:"interacting-via-the-key-manager"},"Interacting via the Key Manager"),(0,r.kt)("p",null,"Most of the functions on the UP contract, such as ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/erc725-contract#setdata---erc725y"},(0,r.kt)("inlineCode",{parentName:"a"},"setData(...)"))," and ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/erc725-contract#execute---erc725x"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(...)"))," can only be called by the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/erc725-contract#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner")),". Therefore if we want to use our UP to do meaningful things, ",(0,r.kt)("strong",{parentName:"p"},"all interactions should go through the KM"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6151).Z,width:"1525",height:"655"})),(0,r.kt)("p",null,"To transfer LYX from our UP, we need to perform the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"ABI encode the ",(0,r.kt)("a",{parentName:"li",href:"/standards/smart-contracts/erc725-contract#execute---erc725x"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(operation,to,value,data)"))," function call of our UP."),(0,r.kt)("li",{parentName:"ol"},"pass the ABI encoded ",(0,r.kt)("strong",{parentName:"li"},"payload")," to the ",(0,r.kt)("a",{parentName:"li",href:"/standards/smart-contracts/lsp6-key-manager#execute"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(payload)"))," function on the KM.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Make sure to understand the difference between both ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(...)")," functions!"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/standards/smart-contracts/erc725-contract#execute---erc725x"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(operation,to,value,data)"))," from the Universal Profile = generic executor function used to call and interact with EOAs or contracts + deploy new contracts from the UP."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"execute(payload)")," from the Key Manager = used to run functions on the Universal Profile linked to the Key Manager (by forwarding ABI encoded payload), while verifying if the caller has the right permissions to do so."))),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To complete this mini-guide, we will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"UniversalProfile")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"KeyManager")," contracts ABIs from the ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@lukso/lsp-smart-contracts"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts"))," npm package."),(0,r.kt)("li",{parentName:"ul"},"the address of our Universal Profile we want to send LYX from.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install web3 @lukso/lsp-smart-contracts\n")),(0,r.kt)("h2",{id:"step-1---get-some-lyx"},"Step 1 - Get some LYX"),(0,r.kt)("p",null,"In order to send LYX from our Universal Profile, we will first request some free test LYX for our UP via the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://faucet.l16.lukso.network/"},"L16 Faucet")),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Visit the \u27a1\ufe0f ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://faucet.l16.lukso.network/"},"LUKSO L16 Faucet Website")),"."),(0,r.kt)("li",{parentName:"ol"},"Paste the address of your Universal Profile in the input field :arrow","*","down: and click in the ",(0,r.kt)("em",{parentName:"li"},'"Give me LYX"')," button.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"L16 Faucet screenshot",src:a(6086).Z,width:"843",height:"279"})),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Check the balance of your Universal Profile on the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://explorer.execution.l16.lukso.network/"},"LUKSO L16 Block Explorer"))," \u2b07\ufe0f")),(0,r.kt)("p",null,"Paste the address of the Universal Profile in the address field in the top right corner of the block explorer."),(0,r.kt)("p",null,"If everything went successfully, you should see that the ",(0,r.kt)("em",{parentName:"p"},'"Balance"')," field of your Universal Profile has been updated!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"LUKSO L16 Network Block Explorer (screenshot)",src:a(1351).Z,width:"482",height:"415"})),(0,r.kt)("h2",{id:"step-2---create-the-contracts-instances"},"Step 2 - Create the contracts instances"),(0,r.kt)("p",null,"The first step is to create instances of our Universal Profile and Key Manager contracts."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"2.1 - First, we will use the Universal Profile to retrieve the address of the KeyManager via the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp0-erc725-account#owner"},(0,r.kt)("inlineCode",{parentName:"a"},"owner()"))," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"2.2 - Then, we will use the Key Manager to interact with our Universal Profile and send some LYX."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const UniversalProfile = require('@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json');\nconst KeyManager = require('@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json');\n\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUPAddress);\n\n// the KeyManager is the owner of the Universal Profile\n// so we can call the owner() function to obtain the KeyManager's address\nconst owner = myUP.methods.owner().call();\n\nconst myKM = new web3.eth.Contract(KeyManager.abi, owner);\n")),(0,r.kt)("h2",{id:"step-3---encode-the-payload-to-transfer-lyx"},"Step 3 - Encode the payload to transfer LYX"),(0,r.kt)("p",null,"With our contract instances ready, we now want to transfer some LYX from the UP using the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(...)")," function.\nThe next step is to ABI encode this function call with the correct parameters, as explained in the introduction."),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/en/v1.7.4/web3-eth-contract.html#methods-mymethod-encodeabi"},(0,r.kt)("inlineCode",{parentName:"a"},"encodeABI()"))," method from web3.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\nconst OPERATION_CALL = 0;\nconst recipient = '0x...'; // address the recipient (any address, including an other UP)\nconst amount = web3.utils.toWei('3'); // amount of LYX we want to transfer\n// payload executed at the target (here nothing, just a plain LYX transfer)\nconst data = '0x';\n\n// encode the payload to transfer 3 LYX from the UP\nconst transferLYXPayload = await myUP.methods\n  .execute(OPERATION_CALL, recipient, amount, data)\n  .encodeABI();\n")),(0,r.kt)("h2",{id:"step-4---execute-via-the-key-manager"},"Step 4 - Execute via the Key Manager"),(0,r.kt)("h3",{id:"41---load-our-eoa"},"4.1 - Load our EOA"),(0,r.kt)("p",null,"Like in other guides, the first step is to load our EOA that act as the main controller for our Universal Profile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Load EOA from a private key"',title:'"Load',EOA:!0,from:!0,a:!0,private:!0,'key"':!0},"const Web3 = require('web3');\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key (main controller address)\n\nconst myEOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n")),(0,r.kt)("h3",{id:"42---send-the-lyx-transfer-payload"},"4.2 - Send the LYX transfer payload"),(0,r.kt)("p",null,"The final step is to pass the encoded LYX transfer function to the Key Manager. Since we are calling from the UP's owner address, the Key Manager will authorize and execute the LYX transfer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await myKM.execute(transferLYXPayload).send({\n  from: myEOA.address,\n  gasLimit: 300_000,\n});\n")),(0,r.kt)("h2",{id:"final-code"},"Final Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Web3 = require('web3');\nconst UniversalProfile = require('@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json');\nconst KeyManager = require('@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json');\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key (main controller address)\nconst myEOA = web3.eth.accounts.wallet.add(PRIVATE_KEY); // amount of LYX we want to transfer\n\n// 1. instantiate your contracts\nconst myUP = new web3.eth.Contract(UniversalProfile.abi, myUPAddress);\n\n// the KeyManager is the owner of the Universal Profile\n// so we can call the owner() function to obtain the KeyManager's address\nconst owner = myUP.methods.owner().call();\n\nconst myKM = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst OPERATION_CALL = 0;\nconst recipient = '0x...'; // address the recipient (any address, including an other UP)\nconst amount = web3.utils.toWei('3');\n// payload executed at the target (here nothing, just a plain LYX transfer)\nconst data = '0x';\n\n// 2. encode the payload to transfer 3 LYX from the UP\nconst transferLYXPayload = await myUP.methods\n  .execute(OPERATION_CALL, recipient, amount, data)\n  .encodeABI();\n\n// 3. execute the LYX transfer via the Key Manager\nawait myKM.execute(transferLYXPayload).send({\n  from: myEOA.address,\n  gasLimit: 300_00,\n});\n")))}d.isMDXComponent=!0},6086:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/L16-faucet-b6865fcdb7d8325ce6dccc4900442dc6.png"},1351:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/explorer-balance-cdcdf07e35e4f98915d18601c8187634.png"},6173:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/guide-LYX-transfer-1a56d65249f7fdc352da689946bc6569.jpeg"},6151:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/transfer-lyx-interaction-via-key-manager-34674e382b0040308a7663e45884c536.jpeg"}}]);