"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[4759],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var r=n.createContext({}),p=function(e){var t=n.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(r.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,i=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),g=s,y=m["".concat(r,".").concat(g)]||m[g]||c[g]||i;return a?n.createElement(y,o(o({ref:t},d),{},{components:a})):n.createElement(y,o({ref:t},d))}));function g(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7411:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(3117),s=(a(7294),a(3905));const i={sidebar_position:2,title:"Digital Asset"},o="Deploying a Digital Asset",l={unversionedId:"tools/lsp-factoryjs/deployment/digital-asset",id:"tools/lsp-factoryjs/deployment/digital-asset",title:"Digital Asset",description:"LSPFactory enables developers to easily deploy LSP7] and [LSP8] Digital Asset smart contracts for their [fungible token or NFT 2.0 use cases.",source:"@site/docs/tools/lsp-factoryjs/deployment/digital-asset.md",sourceDirName:"tools/lsp-factoryjs/deployment",slug:"/tools/lsp-factoryjs/deployment/digital-asset",permalink:"/tools/lsp-factoryjs/deployment/digital-asset",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/tools/lsp-factoryjs/deployment/digital-asset.md",tags:[],version:"current",lastUpdatedAt:1656116386,formattedLastUpdatedAt:"Jun 25, 2022",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Digital Asset"},sidebar:"toolsSidebar",previous:{title:"Universal Profile",permalink:"/tools/lsp-factoryjs/deployment/universal-profile"},next:{title:"Options",permalink:"/tools/lsp-factoryjs/deployment/options"}},r={},p=[{value:"Deploying an NFT 2.0",id:"deploying-an-nft-20",level:2},{value:"LSP7 NFT 2.0",id:"lsp7-nft-20",level:4},{value:"LSP8 NFT 2.0",id:"lsp8-nft-20",level:4},{value:"Deploying a Fungible Token",id:"deploying-a-fungible-token",level:2},{value:"Digital Asset Properties",id:"digital-asset-properties",level:2},{value:"Controller Address",id:"controller-address",level:3},{value:"Adding LSP4 Metadata",id:"adding-lsp4-metadata",level:3},{value:"Digital Asset Metadata",id:"digital-asset-metadata",level:4},{value:"Adding Images and Assets",id:"adding-images-and-assets",level:3},{value:"Pre-uploaded Images",id:"pre-uploaded-images",level:4},{value:"Pre-uploaded Assets",id:"pre-uploaded-assets",level:4},{value:"Passing JavaScript File Object",id:"passing-javascript-file-object",level:4},{value:"Deployment Configuration",id:"deployment-configuration",level:2},{value:"Proxy Deployment",id:"proxy-deployment",level:3},{value:"IPFS Upload Options",id:"ipfs-upload-options",level:3},{value:"Reactive Deployment",id:"reactive-deployment",level:3},{value:"LSP7 Deployment Events",id:"lsp7-deployment-events",level:4},{value:"LSP8 Deployment Events",id:"lsp8-deployment-events",level:4}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"deploying-a-digital-asset"},"Deploying a Digital Asset"),(0,s.kt)("p",null,"LSPFactory enables developers to easily deploy ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," and ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8")," Digital Asset smart contracts for their ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#fungible-token"},"fungible token")," or ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#deploying-nft-20"},"NFT 2.0")," use cases."),(0,s.kt)("p",null,"To deploy a mintable ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," Digital Asset:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP7DigitalAsset.deploy(digitalAssetProperties [, options]);\n")),(0,s.kt)("p",null,"To deploy a mintable LSP8 Identifiable Digital Asset:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy(digitalAssetProperties [, options]);\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"By default LSPFactory deploys the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/lsp-smart-contracts/blob/develop/contracts/LSP7DigitalAsset/presets/LSP7Mintable.sol"},(0,s.kt)("inlineCode",{parentName:"a"},"Mintable"))," implementation of LSP7 and LSP8 digital assets. To call the ",(0,s.kt)("inlineCode",{parentName:"p"},"mint")," function import the ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP7Mintable")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP8Mintable")," abi from the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/lsp-smart-contracts"},"lsp-smart-contracts library"),".")),(0,s.kt)("h2",{id:"deploying-an-nft-20"},"Deploying an NFT 2.0"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#lsp7-nft-20"},"LSP7")," and ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#lsp8-nft-20"},"LSP8")," Digital Assets standards can both be used for NFT 2.0 contracts."),(0,s.kt)("h4",{id:"lsp7-nft-20"},"LSP7 NFT 2.0"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," standard can be useful for NFT collections where you want all tokens to have the same ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#adding-lsp4-metadata"},"metadata"),". For example a collection of digital clothing items."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," is based on the ",(0,s.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC20")," token standard and can be used as an NFT 2.0 contract by setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"isNFT")," constructor value to ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," when deploying. This will set the contract ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-7-DigitalAsset.md#decimals"},"decimals")," value to 0 so that all tokens are indivisible."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP7DigitalAsset.deploy({\n    isNFT: true,\n    controllerAddress: '0x56fE4E7dc2bc0b6397E4609B07b4293482E3F72B',\n    name: 'MYTOKEN'\n    symbol: 'DEMO',\n});\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"To deploy an ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," NFT 2.0 smart contract, the ",(0,s.kt)("inlineCode",{parentName:"p"},"isNFT")," parameter must be set to ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," when deploying. If ",(0,s.kt)("inlineCode",{parentName:"p"},"isNFT")," is set to false the token decimals value will be set to 18 meaning they can be fractionalized.")),(0,s.kt)("h4",{id:"lsp8-nft-20"},"LSP8 NFT 2.0"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8")," can be useful for cases where all NFTs in a collection are unique and have their own ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#adding-lsp4-metadata"},"metadata"),". For example an avatar collection where all tokens have a different appearance."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8")," is based on the ",(0,s.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-721"},"ERC721")," token standard used for NFT contracts. Each ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8")," token has its own unique ",(0,s.kt)("inlineCode",{parentName:"p"},"tokenId")," and metadata that describes its uniqueness."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n    controllerAddress: '0x56fE4E7dc2bc0b6397E4609B07b4293482E3F72B',\n    name: 'MYTOKEN'\n    symbol: 'DEMO',\n});\n")),(0,s.kt)("h2",{id:"deploying-a-fungible-token"},"Deploying a Fungible Token"),(0,s.kt)("p",null,"To deploy a fungible token contract use the ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," standard. ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," is based on the ",(0,s.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC20")," token standard, though is improved by allowing token contracts to have their own metadata via its ",(0,s.kt)("a",{parentName:"p",href:"/standards/generic-standards/lsp2-json-schema"},"ERC725Y")," key value store and ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#adding-lsp4-metadata"},"LSP4 Digital Asset Metadata"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP7DigitalAsset.deploy(digitalAssetProperties [, options]);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP7DigitalAsset.deploy({\n    isNFT: false,\n    controllerAddress: '0x56fE4E7dc2bc0b6397E4609B07b4293482E3F72B',\n    name: 'MYTOKEN'\n    symbol: 'DEMO',\n});\n")),(0,s.kt)("p",null,"When deploying, set the ",(0,s.kt)("inlineCode",{parentName:"p"},"isNFT")," value to ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),". This will set the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-7-DigitalAsset.md#decimals"},"decimals")," value on the token contract to 18, allowing tokens to be fractionalized."),(0,s.kt)("h2",{id:"digital-asset-properties"},"Digital Asset Properties"),(0,s.kt)("p",null,"Inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"digitalAssetProperties")," object, you can set digital assset configuration options such as the ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#controller-address"},"controller address")," and ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#adding-lsp4-metadata"},"LSP4 metadata"),"."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," and ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8")," share the same constructor parameters, however LSP7 has an additional parameter ",(0,s.kt)("inlineCode",{parentName:"p"},"isNFT")," used to set the decimals value on the contract to 0 or 18."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP7DigitalAsset.deploy({\n    isNFT: false,\n    controllerAddress: '0x56fE4E7dc2bc0b6397E4609B07b4293482E3F72B',\n    name: 'MYTOKEN'\n    symbol: 'DEMO',\n});\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n    controllerAddress: '0x56fE4E7dc2bc0b6397E4609B07b4293482E3F72B',\n    name: 'MYTOKEN'\n    symbol: 'DEMO',\n});\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"use the ",(0,s.kt)("inlineCode",{parentName:"p"},"isNFT")," parameter on ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," to deploy an ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#deploying-an-nft-20"},"NFT 2.0")," or ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#deploying-a-fungible-token"},"token contract"),".")),(0,s.kt)("h3",{id:"controller-address"},"Controller Address"),(0,s.kt)("p",null,"Set the address which should own your digital asset contract by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"controllerAddress")," parameter. LSPFactory will transfer the token contract to the address specified here after setting the ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/digital-asset#adding-lsp4-metadata"},"LSP4 metadata")," on the smart contract."),(0,s.kt)("h3",{id:"adding-lsp4-metadata"},"Adding LSP4 Metadata"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP7-Digital-Asset"},"LSP7")," and ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP8-Identifiable-Digital-Asset"},"LSP8")," both adhere to the ",(0,s.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4 Digital Asset Metadata standard"),". Developers can specify the LSP4Metadata by setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"symbol"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"digitalAssetMetadata")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"creators")," keys when deploying with LSPFactory."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n    controllerAddress: '0x56fE4E7dc2bc0b6397E4609B07b4293482E3F72B',\n    name: 'MYTOKEN'\n    symbol: 'DEMO',\n    creators: ['0x7Ab53a0C861fb955050A8DA109eEeA5E61fd8Aa4', '0x6c1F3Ed2F99054C88897e2f32187ef15c62dC560'],\n    digitalAssetMetadata: {\n      description: 'My NFT 2.0'\n      ...\n    }\n});\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"symbol")," keys are passed as deployment constructor parameters. These values will set the ",(0,s.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP4-Digital-Asset-Metadata#lsp4tokenname"},(0,s.kt)("inlineCode",{parentName:"a"},"LSP4TokenName"))," and ",(0,s.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP4-Digital-Asset-Metadata#lsp4tokensymbol"},(0,s.kt)("inlineCode",{parentName:"a"},"LSP4TokenSymbol"))," ",(0,s.kt)("a",{parentName:"p",href:"/standards/generic-standards/lsp2-json-schema"},"ERC725Y")," keys directly on the contract during deployment."),(0,s.kt)("p",null,"Addresses passed inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"creators")," array will be set under the ",(0,s.kt)("a",{parentName:"p",href:"../../../standards/nft-2.0/LSP4-Digital-Asset-Metadata#lsp4creators"},"LSP4Creators[]")," ",(0,s.kt)("a",{parentName:"p",href:"/standards/generic-standards/lsp2-json-schema"},"ERC725Y")," key."),(0,s.kt)("admonition",{type:"warning"},(0,s.kt)("p",{parentName:"admonition"},"LSPFactory does not set the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-3-UniversalProfile-Metadata.md#lsp3issuedassets"},"LSP3IssuedAssets key")," on any Universal Profile when deploying a digital asset. This key will have to be updated seperately.")),(0,s.kt)("h4",{id:"digital-asset-metadata"},"Digital Asset Metadata"),(0,s.kt)("p",null,"Further Digital Asset metadata can be added by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"digitalAssetMetadata")," parameter. This is metadata stored as JSON on a server and referenced from the contract by the ",(0,s.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP4-Digital-Asset-Metadata#lsp4metadata"},(0,s.kt)("inlineCode",{parentName:"a"},"LSP4Metadata"))," ",(0,s.kt)("a",{parentName:"p",href:"/standards/generic-standards/lsp2-json-schema"},"ERC725Y")," key."),(0,s.kt)("admonition",{title:"Info",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Digital Asset Metadata can be passed as either a JSON object containing the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-4-DigitalAsset-Metadata.md"},"LSP4Metadata")," you want to upload or a URL of your previously uploaded metadata.")),(0,s.kt)("p",null,"If LSP4Metadata is passed as an object, LSPFactory will process and upload your metadata to IPFS."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"See ",(0,s.kt)("a",{parentName:"p",href:"././universal-profile#ipfs-upload-options"},"Upload Options")," for details on how to specify a custom IPFS gateway.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Deploying an LSP8 Digital Asset with description and links set in the LSP4Metadata JSON"',title:'"Deploying',an:!0,LSP8:!0,Digital:!0,Asset:!0,with:!0,description:!0,and:!0,links:!0,set:!0,in:!0,the:!0,LSP4Metadata:!0,'JSON"':!0},'await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    description: "My Digital Asset",\n    links: [{\n      title: "LUKSO Docs",\n      url: "https://docs.lukso.tech"\n    }],\n  },\n  ...\n});\n')),(0,s.kt)("p",null,"LSP4 Metadata can also be passed with the ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP4Metadata")," key:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Passing LSP4Metadata key"',title:'"Passing',LSP4Metadata:!0,'key"':!0},'await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    LSP4Metadata: {\n      description: "My Digital Asset",\n      links: [{\n        title: "LUKSO Docs",\n        url: "https://docs.lukso.tech"\n      }],\n    },\n  }\n  ...\n});\n')),(0,s.kt)("p",null,"Alternatively ",(0,s.kt)("inlineCode",{parentName:"p"},"digitalAssetMetadata")," can be passed as a URL where the LSP4Metadata JSON file is stored. LSPFactory will download the JSON file before hashing it and generate the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md#JSONURL"},"JSONURL")," value to be stored on the token contract's ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP4Metadata")," ",(0,s.kt)("a",{parentName:"p",href:"/standards/generic-standards/lsp2-json-schema"},"ERC725Y")," key."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title='Providing a previously uploaded LSP4 metadata IPFS URL'",title:"'Providing",a:!0,previously:!0,uploaded:!0,LSP4:!0,metadata:!0,IPFS:!0,"URL'":!0},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: 'ipfs://QmQ7Wq4y2gWiuzB4a4Wd6UiidKNpzCJRpgzFqQwzyq6SsV',\n  ...\n});\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title='Providing a previously uploaded LSP4 metadata URL'",title:"'Providing",a:!0,previously:!0,uploaded:!0,LSP4:!0,metadata:!0,"URL'":!0},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: 'https://mycoolserver.com/myProfile.json',\n  ...\n});\n")),(0,s.kt)("p",null,"You can also provide the JSON file yourself to generate the hash value:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title='Providing a previously uploaded LSP4 metadata URL and JSON file itself'",title:"'Providing",a:!0,previously:!0,uploaded:!0,LSP4:!0,metadata:!0,URL:!0,and:!0,JSON:!0,file:!0,"itself'":!0},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    json: lsp3ProfileJson,\n    url: 'https://mycoolserver.com/myProfile.json'\n  },\n  ...\n});\n")),(0,s.kt)("p",null,"Or you can provide the hash value and then uploaded file URL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title='Providing a previously uploaded LSP4 metadata URL and hash values'",title:"'Providing",a:!0,previously:!0,uploaded:!0,LSP4:!0,metadata:!0,URL:!0,and:!0,hash:!0,"values'":!0},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    hash: '0xfdafad027ecfe57eb4ad047b938805d1dec209d6e9f960fc320d7b9b11cbed14',\n    hashFunction: 'keccak256(utf8)',\n    url: 'https://mycoolserver.com/file.json'\n  },\n  ...\n});\n")),(0,s.kt)("h3",{id:"adding-images-and-assets"},"Adding Images and Assets"),(0,s.kt)("p",null,"Images and assets can be included in the LSP4 Metadata file by passing them to the ",(0,s.kt)("inlineCode",{parentName:"p"},"images")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"assets")," parameters of the ",(0,s.kt)("inlineCode",{parentName:"p"},"digitalAssetMetadata")," object."),(0,s.kt)("h4",{id:"pre-uploaded-images"},"Pre-uploaded Images"),(0,s.kt)("p",null,"If you already have images and assets uploaded to IPFS, you can pass the metadata directly inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"digitalAssetMetadata")," object. This metadata will then be set in the LSP4DigitalAsset metadata JSON file and uploaded to IPFS."),(0,s.kt)("p",null,"Images can be passed inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"images")," parameter. This should contain an array of images related to the Digital Asset in multiple sizes. Image 0 should be the main image."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Each element in the ",(0,s.kt)("inlineCode",{parentName:"p"},"images")," array should itself be an array where each element is the metadata of different image size.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    images: [\n      [\n        {\n          width: 500,\n          height: 500,\n          hashFunction: 'keccak256(bytes)',\n          hash: '0xfdafad027ecfe57eb4ad044b938805d1dec209d6e9f960fc320d7b9b11cced14',\n          url: 'ipfs://QmPLqMFDxiUgYAom3Zg4SiwoxDaFcZpHXpCmiDzxrajSGp',\n        }\n        ... // Multiple sizes of the image should be included\n      ],\n      ... // Multiple images may be included\n    ]\n  },\n  ...\n});\n")),(0,s.kt)("p",null,"An icon can also be passed for the Digital Asset. This should be multiple image sizes of the same icon image."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    icon: [\n      {\n        width: 256,\n        height: 256,\n        hashFunction: 'keccak256(bytes)',\n        hash: '0xfdafad027ecfe57eb4ad044b938805d1dec209d6e9f960fc320d7b9b11cced14',\n        url: 'ipfs://QmPLqMFDxiUgYAom3Zg4SiwoxDaFcZpHXpCmiDzxrajSGp',\n      }\n      ... // Multiple sizes of the icon image should be included\n    ]\n  },\n  ...\n});\n")),(0,s.kt)("h4",{id:"pre-uploaded-assets"},"Pre-uploaded Assets"),(0,s.kt)("p",null,"Previously uploaded assets can be included by passing an array of asset metadata in the ",(0,s.kt)("inlineCode",{parentName:"p"},"assets")," parameter."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n  digitalAssetMetadata: {\n    assets: [\n        {\n          hashFunction: 'keccak256(bytes)',\n          hash: '0xfdafad027ecfe57eb4ad044b938805d1dec209d6e9f960fc320d7b9b11cced14',\n          url: 'ipfs://QmPLqMFDxiUgYAom3Zg4SiwoxDaFcZpHXpCmiDzxrajSGp',\n          fileType: 'fbx'\n        }\n      ...\n    ]\n  },\n  ...\n});\n")),(0,s.kt)("h4",{id:"passing-javascript-file-object"},"Passing JavaScript File Object"),(0,s.kt)("p",null,"JavaScript offers a ",(0,s.kt)("inlineCode",{parentName:"p"},"File")," object for easy handling of files inside a browser. Developers can pass this to the ",(0,s.kt)("inlineCode",{parentName:"p"},"images"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"assets")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"icon")," fields to allow easy drag and drop of images from a user interface."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"JavaScript's ",(0,s.kt)("inlineCode",{parentName:"p"},"File")," object is only available when using JavaScript in the browser. If using LSPFactory in a Node.js environment, image metadata should be passed.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'<input type="file" id="asset">\n<input type="file" id="image">\n<input type="file" id="icon">\n\n<script>\n  const myLocalAsset = document.getElementById(\'asset\').files[0];\n  const myLocalImage = document.getElementById(\'image\').files[0];\n  const myLocalIcon = document.getElementById(\'icon\').files[0];\n\n  await lspFactory.LSP8IdentifiableDigitalAsset.deploy({\n    digitalAssetMetadata: {\n      assets: [\n          myLocalAsset\n        ...\n      ],\n      images: [\n        myLocalImage\n      ],\n      ...\n      icon: myLocalIcon\n    },\n    ...\n  });\n<script/>\n')),(0,s.kt)("p",null,"LSPFactory will create five resized versions of any passed images, with max sizes of ",(0,s.kt)("inlineCode",{parentName:"p"},"1800x1800"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"1024x1024"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"640x640"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"320x320"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"180x180"),", or ",(0,s.kt)("inlineCode",{parentName:"p"},"256x256")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"32x32")," if passed as an ",(0,s.kt)("inlineCode",{parentName:"p"},"icon"),". These resized images will be set inside the LSP4 JSON metadata uploaded to IPFS and attached to the token contract."),(0,s.kt)("h2",{id:"deployment-configuration"},"Deployment Configuration"),(0,s.kt)("p",null,"Developers can select a unique deployment configuration for their Digital Asset contract using the ",(0,s.kt)("inlineCode",{parentName:"p"},"options")," parameter. This allows easy deployment of a specific version or implementation of a Digital Asset smart contract by passing the ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#version"},(0,s.kt)("inlineCode",{parentName:"a"},"version"))," parameter."),(0,s.kt)("p",null,"Under the ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#version"},"version")," parameter developers can pass a ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#version"},"version number"),", ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#deploying-custom-bytecode"},"custom bytecode")," or a ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#custom-base-contract-address"},"base contract address")," to be used during deployment. By setting the ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#deploy-proxy"},(0,s.kt)("inlineCode",{parentName:"a"},"deployProxy"))," parameter developers can specify whether the contract should be deployed using proxy deployment."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Read more about configuring proxy deployment and contract versioning ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options"},"here"),".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Passing LSP7DigitalAsset contract options"',title:'"Passing',LSP7DigitalAsset:!0,contract:!0,'options"':!0},"await lspFactory.LSP7DigitalAsset.deploy({...}, {\n    LSP7DigitalAsset: {\n        version: '0x...', // Custom bytecode\n        deployProxy: false\n    },\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Passing LSP8IdentifiableDigitalAsset contract options"',title:'"Passing',LSP8IdentifiableDigitalAsset:!0,contract:!0,'options"':!0},"await lspFactory.LSP8IdentifiableDigitalAsset.deploy({...}, {\n    LSP8IdentifiableDigitalAsset: {\n        version: '0x87cd003F9Ac7d6eBcd811f7b427c7dBF6f6ba132', // Custom base contract address\n        deployProxy: true\n    },\n})\n")),(0,s.kt)("h3",{id:"proxy-deployment"},"Proxy Deployment"),(0,s.kt)("p",null,"By passing the ",(0,s.kt)("a",{parentName:"p",href:"/tools/lsp-factoryjs/deployment/options#deploy-proxy"},(0,s.kt)("inlineCode",{parentName:"a"},"deployProxy"))," parameter developers can determine whether their digital asset smart contract should be deployed as a ",(0,s.kt)("strong",{parentName:"p"},"minimal proxy contract")," based on ",(0,s.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1167"},"EIP1167")," or an entire contract with a constructor."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},"deployProxy")," defaults to ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," for both LSP7 and LSP8. If ",(0,s.kt)("inlineCode",{parentName:"p"},"deployProxy")," is set to false, a full contract with a constructor will be deployed at the latest version.")),(0,s.kt)("h3",{id:"ipfs-upload-options"},"IPFS Upload Options"),(0,s.kt)("p",null,"You can specify how you want your profile metadata to be uploaded by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"ipfsGateway")," inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"options")," object. Here you can set the IPFS gateway where you want the metadata to be uploaded."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"The procedure takes a URL string or an object as defined by the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs-http-client#createoptions"},"IPFS-HTTP Client")," library which is used internally to interact with the specified IPFS node.")),(0,s.kt)("p",null,"If a URL is passed and no port is specified, the standard 5001 port will be used."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Passing ipfsGateway URL"',title:'"Passing',ipfsGateway:!0,'URL"':!0},"lspFactory.LSP7DigitalAsset.deploy({...}, {\n  ipfsGateway: 'https://ipfs.infura.io:5001'\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Passing ipfsGateway URL string with port set"',title:'"Passing',ipfsGateway:!0,URL:!0,string:!0,with:!0,port:!0,'set"':!0},"lspFactory.LSP7DigitalAsset.deploy({...}, {\n  ipfsGateway: 'https://ipfs.infura.io' // No port set. Port 5001 will be used\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"await lspFactory.LSP7DigitalAsset.deploy({...}, {\n  ipfsGateway: {\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https',\n  }\n});\n")),(0,s.kt)("p",null,"If the ",(0,s.kt)("inlineCode",{parentName:"p"},"ipfsGateway")," parameter is provided, it will override the ",(0,s.kt)("inlineCode",{parentName:"p"},"ipfsGateway")," object passed during the instantiation of the LSPFactory for this function call only."),(0,s.kt)("h3",{id:"reactive-deployment"},"Reactive Deployment"),(0,s.kt)("p",null,"LSPFactory emits events for each step of the deployment process. These events can be hooked into by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"onDeployEvents")," object inside of the ",(0,s.kt)("inlineCode",{parentName:"p"},"options")," object."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"onDeployEvents")," object takes three callback handler parameters:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"next")," will be called once for every deployment event that is fired."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"complete")," will be called once after deployment is finished with the completed contract deployment details."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"error")," will be called once if an error is thrown during deployment.")),(0,s.kt)("p",null,"This enables LSPFactory to be used for certain reactive behaviors. For example, to give better feedback to users during deployment from a user interface such as a loading bar, or display live updates with the details and addresses of contracts as they are deployed."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"complete")," callback will be called with the same contracts object which is returned when the ",(0,s.kt)("inlineCode",{parentName:"p"},"deploy")," function is resolved.")),(0,s.kt)("h4",{id:"lsp7-deployment-events"},"LSP7 Deployment Events"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Reactive deployment of an LSP7 Digital Asset"',title:'"Reactive',deployment:!0,of:!0,an:!0,LSP7:!0,Digital:!0,'Asset"':!0},"const contracts = lspFactory.LSP7DigitalAsset.deploy({...}, {\n  onDeployEvents: {\n    next: (deploymentEvent) => {\n      console.log(deploymentEvent);\n    },\n    error: (error) => {\n      console.error(error);\n    },\n    complete: (contracts) => {\n      console.log('Digital Asset deployment completed');\n      console.log(contracts.LSP7DigitalAsset);\n    },\n  }\n});\n\n/**\n{\n  type: 'PROXY_DEPLOYMENT',\n  contractName: 'LSP7DigitalAsset',\n  status: 'PENDING',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'PROXY_DEPLOYMENT',\n  contractName: 'LSP7DigitalAsset',\n  status: 'COMPLETE',\n  contractAddress: '0x97053C386eaa49d6eAD7477220ca04EFcD857dde',\n  receipt: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP7DigitalAsset',\n  functionName: 'initialize(string,string,address,bool)',\n  status: 'PENDING',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP7DigitalAsset',\n  functionName: 'initialize(string,string,address,bool)',\n  status: 'COMPLETE',\n  receipt: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP7DigitalAsset',\n  functionName: 'setData(bytes32[],bytes[])',\n  status: 'PENDING',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP7DigitalAsset',\n  functionName: 'setData(bytes32[],bytes[])',\n  status: 'COMPLETE',\n  receipt: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  status: 'PENDING',\n  contractName: 'LSP7DigitalAsset',\n  functionName: 'transferOwnership(address)',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP7DigitalAsset',\n  functionName: 'transferOwnership(address)',\n  status: 'COMPLETE',\n  receipt: {\n    ...\n  }\n}\nDigital Asset deployment completed\n{\n  address: '0x97053C386eaa49d6eAD7477220ca04EFcD857dde',\n  receipt: {\n    ...\n  },\n}\n*/\n")),(0,s.kt)("h4",{id:"lsp8-deployment-events"},"LSP8 Deployment Events"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Reactive deployment of an LSP8 Identifiable Digital Asset"',title:'"Reactive',deployment:!0,of:!0,an:!0,LSP8:!0,Identifiable:!0,Digital:!0,'Asset"':!0},"const contracts = lspFactory.LSP8IdentifiableDigitalAsset.deploy({...}, {\n  onDeployEvents: {\n    next: (deploymentEvent) => {\n      console.log(deploymentEvent);\n    },\n    error: (error) => {\n      console.error(error);\n    },\n    complete: (contracts) => {\n      console.log('Digital Asset deployment completed');\n      console.log(contracts.LSP8IdentifiableDigitalAsset);\n    },\n  }\n});\n\n/**\n{\n  type: 'PROXY_DEPLOYMENT',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  status: 'PENDING',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'PROXY_DEPLOYMENT',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  status: 'COMPLETE',\n  contractAddress: '0x2cA038832c15E61b83d47414Eb53818a45e0E142',\n  receipt: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  functionName: 'initialize(string,string,address)',\n  status: 'PENDING',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  functionName: 'initialize(string,string,address)',\n  status: 'COMPLETE',\n  receipt: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  functionName: 'setData(bytes32[],bytes[])',\n  status: 'PENDING',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  functionName: 'setData(bytes32[],bytes[])',\n  status: 'COMPLETE',\n  receipt: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  status: 'PENDING',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  functionName: 'transferOwnership(address)',\n  transaction: {\n    ...\n  }\n}\n{\n  type: 'TRANSACTION',\n  contractName: 'LSP8IdentifiableDigitalAsset',\n  functionName: 'transferOwnership(address)',\n  status: 'COMPLETE',\n  receipt: {\n    ...\n  }\n}\nDigital Asset deployment completed\n{\n  address: '0x2cA038832c15E61b83d47414Eb53818a45e0E142',\n  receipt: {\n    ...\n  },\n}\n*/\n\n")))}c.isMDXComponent=!0}}]);