"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[1460],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,f=m["".concat(c,".").concat(u)]||m[u]||l[u]||s;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1972:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=a(3117),r=(a(7294),a(3905));const s={title:"Standard Detection",sidebar_position:3},o="Standard Detection",i={unversionedId:"standards/standard-detection",id:"standards/standard-detection",title:"Standard Detection",description:"The interfaceId and the SupportedStandards: data key is not the most secure way to check for a standard, as they could be set manually.",source:"@site/docs/standards/standard-detection.md",sourceDirName:"standards",slug:"/standards/standard-detection",permalink:"/standards/standard-detection",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/standards/standard-detection.md",tags:[],version:"current",lastUpdatedAt:1655561839,formattedLastUpdatedAt:"Jun 18, 2022",sidebarPosition:3,frontMatter:{title:"Standard Detection",sidebar_position:3},sidebar:"standardsSidebar",previous:{title:"Standards Roadmap",permalink:"/standards/standards-roadmap"},next:{title:"ERC725",permalink:"/standards/lsp-background/erc725"}},c={},d=[{value:"Interface Detection",id:"interface-detection",level:2},{value:"Interface Example",id:"interface-example",level:3},{value:"Metadata Detection",id:"metadata-detection",level:2},{value:"Metadata Example",id:"metadata-example",level:3}],p={toc:d};function l(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"standard-detection"},"Standard Detection"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"interfaceId"))," and the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"SupportedStandards:{StandardName}"))," data key is not the most secure way to check for a standard, as they could be set manually.")),(0,r.kt)("p",null,"There are two types of ",(0,r.kt)("strong",{parentName:"p"},"LSP")," standards:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Interface Standards"),": Where we standardize a set of functions. i.e:"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account"},"LSP0-ERC725Account"),", ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager"},"LSP6-KeyManager"),", ",(0,r.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP7-Digital-Asset"},"LSP7-DigitalAsset"),", etc.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Metadata Standards"),": Where we standardize a set of ERC725Y Data keys. i.e:"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp3-universal-profile-metadata"},"LSP3-UniversalProfile-Metadata"),", ",(0,r.kt)("a",{parentName:"p",href:"/standards/nft-2.0/LSP4-Digital-Asset-Metadata"},"LSP4-DigitalAsset-Metadata"),", ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp10-received-vaults"},"LSP10ReceivedVaults"),", etc."))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Interface and metadata standards",src:a(8022).Z,width:"3010",height:"1328"})),(0,r.kt)("p",null,"These two standards types are fundamental for interacting with smart contracts on the LUKSO blockchain."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Interface Standard")," defines the functions that can be called on a smart contract and their expected parameters. On the other hand, ",(0,r.kt)("strong",{parentName:"p"},"Metadata Standard")," informs about the data set by default on the contract and which data keys to query to retrieve such data."),(0,r.kt)("h2",{id:"interface-detection"},"Interface Detection"),(0,r.kt)("admonition",{title:"Tip",type:"success"},(0,r.kt)("p",{parentName:"admonition"},"See the page ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./smart-contracts/interface-ids"},"Contracts Implementation > Interface IDs"))," for a complete list of current ",(0,r.kt)("inlineCode",{parentName:"p"},"interfaceId")," fields.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This section covers how to detect if a contract implements a specific interface.")),(0,r.kt)("p",null,"We can verify if a contract implements a specific set of functions (= an ",(0,r.kt)("strong",{parentName:"p"},"interface"),") using the function ",(0,r.kt)("inlineCode",{parentName:"p"},"supportsInterface(interfaceId)"),", passing the bytes4 ",(0,r.kt)("inlineCode",{parentName:"p"},"interfaceId")," as a parameter."),(0,r.kt)("p",null,"Calling this function will return ",(0,r.kt)("strong",{parentName:"p"},"TRUE")," if the contract implements this specific interfaceId, ",(0,r.kt)("strong",{parentName:"p"},"FALSE")," otherwise."),(0,r.kt)("h3",{id:"interface-example"},"Interface Example"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/universal-profile/lsp3-universal-profile-metadata"},"Universal Profile"))," is a contract based on ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account"},"ERC725Account"),"(LSP0). Therefore, the contract SHOULD implement the functions defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-0-ERC725Account.md#interface-cheat-sheet"},"ERC725Account interface"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const UniversalProfile = require("@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json");\nconst Web3 = require("web3");\n\n// Connect to the LUKSO L14 network\nconst web3 = new Web3("https://rpc.l14.lukso.network");\n\n// Create an instance of the Universal Profile\nconst myUPContract = new web3.eth.Contract(UniversalProfile.abi, "<contract-address>");\n\nconst ERC725AccountInterfaceId = \'0x63cb749b\';\nawait myUPContract.methods.supportsInterface(ERC725AccountInterfaceId).call();\n> TRUE or FALSE\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-165"},"ERC165 - Standard Interface Detection")," for more details.")),(0,r.kt)("h2",{id:"metadata-detection"},"Metadata Detection"),(0,r.kt)("admonition",{title:"Tip",type:"success"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/ERC725Alliance/erc725.js/tree/develop/src/schemas"},"erc725.js"))," GitHub repository lists all the ",(0,r.kt)("inlineCode",{parentName:"p"},"SupportedStandards:{StandardName}")," data keys under each ERC725Y JSON Schema.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This section covers how to detect if a contract contains a specific set of ERC725Y in its storage.")),(0,r.kt)("p",null,"We can verify if a contract contains a specific set of ERC725 keys (= ",(0,r.kt)("strong",{parentName:"p"},"metadata"),") by checking the value stored under the key ",(0,r.kt)("inlineCode",{parentName:"p"},"SupportedStandards:{StandardName}")," in the contract storage, via the function ",(0,r.kt)("inlineCode",{parentName:"p"},"getData(SupportedStandards:{StandardName})"),"."),(0,r.kt)("p",null,"Calling this function will return a specific bytes4 value (defined in the Metadata Standard) if the contract has some metadata keys set by default. Otherwise, it will return an empty value."),(0,r.kt)("h3",{id:"metadata-example"},"Metadata Example"),(0,r.kt)("p",null,"An ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/nft-2.0/LSP7-Digital-Asset"},"LSP7DigitalAsset"))," is a contract that contains ERC725Y Data keys defined in ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-4-DigitalAsset-Metadata.md"},"LSP4 - Digital Asset Metadata")),". Therefore, the contract ",(0,r.kt)("strong",{parentName:"p"},"SHOULD")," have the following ERC725Y Data keys set by default: ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP4TokenName"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP4TokenSymbol"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP4Metadata"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP4CreatorsMap:<address>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP4Creators[]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const LSP7DigitalAsset = require('@lukso/lsp-smart-contracts/artifacts/LSP7DigitalAsset.json');\nconst Web3 = require('web3');\n\n// Connect to the LUKSO L14 network\nconst web3 = new Web3('https://rpc.l14.lukso.network');\n\n// Create an instance of the LSP7 Token\nconst myTokenContract = new web3.eth.Contract(LSP7DigitalAsset.abi, '<contract-address>');\n\nconst SupportedStandards_LSP4 = '0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c';\nawait myTokenContract.methods[\"getData(bytes32[])\"]([SupportedStandards_LSP4DigitalAsset]).call();\n> 0xa4d96624; // valid result according to LSP4\n")))}l.isMDXComponent=!0},8022:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/standard-detection-dafe387cab476e81d7a9858e19b9c88a.jpeg"}}]);